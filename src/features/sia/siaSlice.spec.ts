import siaReducer, { initialState, loadImage, SiaState } from './siaSlice';
import { Image } from '../../lib/imagemagick/types/image';
import { Colorspace } from '../../lib/imagemagick/types/colorspace';
import {
  formatImageBase64Data,
  formatImageFilename,
} from '../../content/ImageLoad/utils';
import { store } from '../../store/store';
import { initModules } from '../modules/modulesSlice';

jest.setTimeout(100 * 20 * 1000);

const testImage: Image = {
  width: 8,
  height: 8,
  colorspace: Colorspace.sRGBColorspace,
  depth: 8,
  format: 'JPEG',
  channels: 8,
  number_channels: 3,
  number_meta_channels: 0,
  metacontent_extent: 0,
  pixels: [
    0, 4, 11, 255, 7, 0, 0, 255, 105, 0, 5, 255, 200, 7, 0, 255, 204, 0, 0, 255,
    117, 10, 2, 255, 0, 0, 7, 255, 0, 7, 2, 255, 8, 0, 0, 255, 92, 1, 0, 255,
    240, 11, 16, 255, 245, 0, 3, 255, 255, 3, 11, 255, 238, 11, 0, 255, 94, 0,
    26, 255, 13, 0, 0, 255, 5, 7, 0, 255, 167, 0, 102, 255, 255, 0, 172, 255,
    243, 69, 180, 255, 238, 167, 43, 255, 254, 186, 0, 255, 162, 113, 0, 255, 0,
    0, 12, 255, 0, 0, 134, 255, 152, 6, 253, 255, 250, 17, 255, 255, 255, 213,
    233, 255, 244, 253, 224, 255, 255, 251, 8, 255, 152, 246, 8, 255, 0, 138, 2,
    255, 0, 9, 222, 255, 29, 0, 253, 255, 223, 100, 242, 255, 255, 255, 250,
    255, 248, 255, 255, 255, 216, 248, 115, 255, 26, 255, 0, 255, 12, 198, 11,
    255, 0, 0, 191, 255, 8, 8, 242, 255, 0, 102, 246, 255, 114, 255, 255, 255,
    109, 248, 251, 255, 5, 248, 78, 255, 2, 254, 9, 255, 0, 193, 4, 255, 0, 8,
    97, 255, 0, 9, 243, 255, 0, 3, 242, 255, 3, 181, 243, 255, 0, 255, 208, 255,
    11, 255, 13, 255, 4, 230, 6, 255, 10, 106, 0, 255, 6, 0, 2, 255, 0, 0, 55,
    255, 27, 0, 138, 255, 0, 8, 143, 255, 0, 126, 7, 255, 3, 146, 0, 255, 2, 66,
    6, 255, 4, 0, 16, 255,
  ],
  base64Data:
    '/9j/4AAQSkZJRgABAQEBLAEsAAD/4QkiRXhpZgAASUkqAAgAAAAIAA4BAgASAAAAbgAAABIBAwABAAAAAQAAABoBBQABAAAAgAAAABsBBQABAAAAiAAAACgBAwABAAAAAgAAADEBAgANAAAAkAAAADIBAgAUAAAAngAAAGmHBAABAAAAsgAAAOoAAABDcmVhdGVkIHdpdGggR0lNUAAsAQAAAQAAACwBAAABAAAAR0lNUCAyLjEwLjMyAAAyMDIyOjA3OjE4IDIzOjQ4OjE3AAIAhpIHABkAAADQAAAAAaADAAEAAAABAAAAAAAAAAAAAAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVAACQD+AAQAAQAAAAEAAAAAAQQAAQAAAAABAAABAQQAAQAAAAABAAACAQMAAwAAAFwBAAADAQMAAQAAAAYAAAAGAQMAAQAAAAYAAAAVAQMAAQAAAAMAAAABAgQAAQAAAGIBAAACAgQAAQAAALcHAAAAAAAACAAIAAgA/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAEAAQADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD5/ooooAKKKKACiiigAooooA6SiiivPPrwooooA2aKKK4z6cKKKKACiiigAooooAxqKKK7D5gKKKKAObooor0D5AKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOkooorzz68KKKKANmiiiuM+nCiiigAooooAKKKKAMaiiiuw+YCiiigDm6KKK9A+QCiiigAooooAKKKKACiiigAooooA3aKKK4j6YKKKKAOuoooryD9FCiiigBaKKKk2CiiigAooooAKKKKAEoooqjEKKKKAORooor1z86CiiigDCooortPmQooooAKKKKACiiigDdoooriPpgooooA66iiivIP0UKKKKAFoooqTYKKKKACiiigAooooASiiiqMQooooA5GiiivXPzoKKKKAMKiiiu0+ZCiiigAooooAKKKKAPQaKKK9k/QQooooA6GiiivTPogooooA2qKKK8k8wKKKKAO5ooor8oPmwooooAkooorxiAooooA89ooor6I5gooooA8Iooor7g+fCiiigAooooAKKKKAPQaKKK9k/QQooooA6GiiivTPogooooA2qKKK8k8wKKKKAO5ooor8oPmwooooAkooorxiAooooA89ooor6I5gooooA8Iooor7g+fCiiigDQooor7c5gooooA7qiiivfPuQooooA6SiiiuA+qCiiigD3qiiivgT8xCiiigDRooorxjmCiiigDIooor8iO8KKKKAOdooor0T5MKKKKAPDaKKK+5PNCiiigDgaKKK/Wj6MKKKKAO6ooor3z7kKKKKAOkooorgPqgooooA96ooor4E/MQooooA0aKKK8Y5gooooAyKKKK/IjvCiiigDnaKKK9E+TCiiigDw2iiivuTzQooooA4qiiiv3w90KKKKALlFFFembhRRRQB7vRRRXwJ9SFFFFAHsdFFFfInzwUUUUAFFFFABRRRQBz9FFFfEHMFFFFAHnlFFFeSfmgUUUUAc7RRRXpnWFFFFAHj1FFFf0mfdBRRRQBcooor0zcKKKKAPd6KKK+BPqQooooA9jooor5E+eCiiigAooooAKKKKAOfooor4g5gooooA88oooryT80CiiigDnaKKK9M6wooooA8dooor+jz7sKKKKAJaKKK9wyCiiigDvKKKK+ePngooooA94ooor4Q4gooooASiiigAooooA5Ciiivij5wKKKKAKlFFFfKGoUUUUAc9RRRXpnrhRRRQB5FRRRX9Gn3QUUUUAS0UUV7hkFFFFAHeUUUV88fPBRRRQB7xRRRXwhxBRRRQAlFFFABRRRQByFFFFfFHzgUUUUAVKKKK+UNQooooA56iiivTPXCiiigDxeiiiv2I/QQooooAv0UUV96coUUUUAOooorpJCiiigD3Oiiivgz87CiiigDbooor5c8sKKKKAMmiiivyo7AooooAgooorQ6AooooA8rooor6s+1CiiigDkaKKK/RD2wooooAv0UUV96coUUUUAOooorpJCiiigD3Oiiivgz87CiiigDbooor5c8sKKKKAMmiiivyo7AooooAgooorQ6AooooA8rooor6s+1CiiigDhKKKK9o+iCiiigCxRRRXtGYUUUUAWqKKK+mMAooooASiiiuMYUUUUAdzRRRX5SfOhRRRQBeooorA5gooooA46iiivYPoAooooA5iiiivRPVCiiigAooooAKKKKALFFFFe0ZhRRRQBaooor6YwCiiigBKKKK4xhRRRQB3NFFFflJ86FFFFAF6iiisDmCiiigDjqKKK9g+gCiiigDmKKKK9E9UKKKKAP/2QD/4Q2SaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6OGMxMzNkZmYtMWY2ZS00MWMzLWI0MDEtZjQ5ZTJiMjk3NzllIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmYzM2Q4OTc0LTY0ZjAtNGYzZC04YTg3LTEyZTQxZWMxYTA1NyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmIzYmZjNGQxLTRkNTEtNGQxNS05YjgyLTg5ZGQ3OTQxOWI2NCIgZGM6Rm9ybWF0PSJpbWFnZS9qcGVnIiBHSU1QOkFQST0iMi4wIiBHSU1QOlBsYXRmb3JtPSJNYWMgT1MiIEdJTVA6VGltZVN0YW1wPSIxNjU4MTc3MzAwMjY1NTI2IiBHSU1QOlZlcnNpb249IjIuMTAuMzIiIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIyOjA3OjE4VDIzOjQ4OjE3KzAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMjowNzoxOFQyMzo0ODoxNyswMzowMCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDpjaGFuZ2VkPSIvIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjE0OTI3ZDNhLWE0YmMtNDMzNi04NTQxLWMyZmE2OTUyYzA1OCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChNYWMgT1MpIiBzdEV2dDp3aGVuPSIyMDIyLTA3LTE2VDEyOjI2OjEzKzAzOjAwIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6Y2hhbmdlZD0iLyIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo2MjcyN2M3NS1lMjk0LTRkYjUtYTM5Ni1lMzVmNDg5NTZlMzEiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoTWFjIE9TKSIgc3RFdnQ6d2hlbj0iMjAyMi0wNy0xOFQyMzo0ODoyMCswMzowMCIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja2V0IGVuZD0idyI/Pv/iArBJQ0NfUFJPRklMRQABAQAAAqBsY21zBDAAAG1udHJSR0IgWFlaIAfmAAcAEgAUAC8ANmFjc3BBUFBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD21gABAAAAANMtbGNtcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADWRlc2MAAAEgAAAAQGNwcnQAAAFgAAAANnd0cHQAAAGYAAAAFGNoYWQAAAGsAAAALHJYWVoAAAHYAAAAFGJYWVoAAAHsAAAAFGdYWVoAAAIAAAAAFHJUUkMAAAIUAAAAIGdUUkMAAAIUAAAAIGJUUkMAAAIUAAAAIGNocm0AAAI0AAAAJGRtbmQAAAJYAAAAJGRtZGQAAAJ8AAAAJG1sdWMAAAAAAAAAAQAAAAxlblVTAAAAJAAAABwARwBJAE0AUAAgAGIAdQBpAGwAdAAtAGkAbgAgAHMAUgBHAEJtbHVjAAAAAAAAAAEAAAAMZW5VUwAAABoAAAAcAFAAdQBiAGwAaQBjACAARABvAG0AYQBpAG4AAFhZWiAAAAAAAAD21gABAAAAANMtc2YzMgAAAAAAAQxCAAAF3v//8yUAAAeTAAD9kP//+6H///2iAAAD3AAAwG5YWVogAAAAAAAAb6AAADj1AAADkFhZWiAAAAAAAAAknwAAD4QAALbEWFlaIAAAAAAAAGKXAAC3hwAAGNlwYXJhAAAAAAADAAAAAmZmAADypwAADVkAABPQAAAKW2Nocm0AAAAAAAMAAAAAo9cAAFR8AABMzQAAmZoAACZnAAAPXG1sdWMAAAAAAAAAAQAAAAxlblVTAAAACAAAABwARwBJAE0AUG1sdWMAAAAAAAAAAQAAAAxlblVTAAAACAAAABwAcwBSAEcAQv/bAEMAAwICAwICAwMDAwQDAwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP/bAEMBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/+ABRDcmVhdGVkIHdpdGggR0lNUAD/wgARCAAIAAgDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAABv/EABQBAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhADEAAAARZ//8QAFhABAQEAAAAAAAAAAAAAAAAABAUG/9oACAEBAAEFAo5IKsl//8QAIBEAAQIFBQAAAAAAAAAAAAAAAQMEBREhAAIGMVKR8P/aAAgBAwEBPwGIarVQaYQxBtUjjQme8/dX/8QAHxEAAAUEAwAAAAAAAAAAAAAAEgMEBREAAQIGUWFx/9oACAECAQE/AdpQ2bjE5zdmIUdi58iv/8QAHRAAAQIHAAAAAAAAAAAAAAAAAxIAAgQRFCEyYv/aAAgBAQAGPwI9wRM5Djaien//xAAaEAABBQEAAAAAAAAAAAAAAAAxAAERIWHR/9oACAEBAAE/ISQAAJbV8X//2gAMAwEAAgADAAAAEB//xAAaEQEAAgMBAAAAAAAAAAAAAAABETFBACGB/9oACAEDAQE/EGGICjZZyDHGfW//xAAZEQEBAQADAAAAAAAAAAAAAAABESExQWH/2gAIAQIBAT8QjGLtZRlDy4ku6k//xAAZEAEAAwEBAAAAAAAAAAAAAAABESFBAFH/2gAIAQEAAT8QwKmnIBC3ZY2eJ7//2Q==',
};

export async function dataUrlToFile(
  dataUrl: string,
  fileName: string,
): Promise<File> {
  const res: Response = await fetch(dataUrl);
  const blob: Blob = await res.blob();
  return new File([blob], fileName, { type: 'image/jpeg' });
}

describe('sia reducer', () => {
  it('should handle initial state', () => {
    expect(siaReducer(undefined, { type: 'unknown' })).toEqual({
      image: undefined,
      isLoaded: false,
    });
  });

  test('should handle loadImage.fulfilled', () => {
    const actual = siaReducer(initialState, {
      type: loadImage.fulfilled,
      payload: testImage,
    });

    expect(actual.image).toEqual(testImage);
  });

  test('should handle loadImage', async () => {
    const url = formatImageBase64Data(testImage.base64Data, testImage.format);
    const file = await dataUrlToFile(
      url,
      formatImageFilename(testImage.format),
    );

    await store.dispatch(initModules());
    await store.dispatch(loadImage(file));

    const state = store.getState();
    expect(state.sia).toEqual({
      image: testImage,
      isLoaded: true,
    } as SiaState);
  });
});
